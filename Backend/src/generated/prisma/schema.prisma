// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                     String          @id @default(uuid())
  username               String?
  email                  String          @unique
  role                   UserRole        @default(USER)
  password               String
  emailVerificationToken String?
  emailTokenExpiry       DateTime?
  isEmailVerification    Boolean         @default(false)
  refreshToken           String?
  forgotPasswordToken    String?
  forgotPasswordExpiry   DateTime?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  avatar                 String?
  problems               problem[]
  submissions            submission[]
  problemSolved          problemSolved[]
  playlists              playlist[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases         Json
  codeSnippets      Json
  referenceSolution Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions      submission[]
  solvedBy         problemSolved[]
  problemPlaylists problemInPlaylist[]
}

model submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user      User              @relation(fields: [userId], references: [id])
  problem   problem           @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testcases testCasesResult[]
}

model testCasesResult {
  id            String   @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  submission submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model problemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  problem problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model playlist {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User                @relation(fields: [userId], references: [id])
  problems problemInPlaylist[]

  @@unique([userId, name])
}

model problemInPlaylist {
  id         String   @id @default(uuid())
  playlistId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist playlist @relation(fields: [playlistId], references: [id])
  problem  problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}
